/*
 * This file is generated by jOOQ.
 */
package org.example.soa_lab2_LabService.generated.jooq.public_.tables.records;


import org.example.soa_lab2_LabService.generated.jooq.public_.tables.Seller;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SellerRecord extends UpdatableRecordImpl<SellerRecord> implements Record4<Integer, String, String, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.seller.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.seller.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.seller.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.seller.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.seller.contact</code>.
     */
    public void setContact(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.seller.contact</code>.
     */
    public String getContact() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.seller.account_id</code>.
     */
    public void setAccountId(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.seller.account_id</code>.
     */
    public Integer getAccountId() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, String, String, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Seller.SELLER.ID;
    }

    @Override
    public Field<String> field2() {
        return Seller.SELLER.NAME;
    }

    @Override
    public Field<String> field3() {
        return Seller.SELLER.CONTACT;
    }

    @Override
    public Field<Integer> field4() {
        return Seller.SELLER.ACCOUNT_ID;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getContact();
    }

    @Override
    public Integer component4() {
        return getAccountId();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getContact();
    }

    @Override
    public Integer value4() {
        return getAccountId();
    }

    @Override
    public SellerRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public SellerRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public SellerRecord value3(String value) {
        setContact(value);
        return this;
    }

    @Override
    public SellerRecord value4(Integer value) {
        setAccountId(value);
        return this;
    }

    @Override
    public SellerRecord values(Integer value1, String value2, String value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SellerRecord
     */
    public SellerRecord() {
        super(Seller.SELLER);
    }

    /**
     * Create a detached, initialised SellerRecord
     */
    public SellerRecord(Integer id, String name, String contact, Integer accountId) {
        super(Seller.SELLER);

        setId(id);
        setName(name);
        setContact(contact);
        setAccountId(accountId);
        resetChangedOnNotNull();
    }
}
