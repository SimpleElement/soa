/*
 * This file is generated by jOOQ.
 */
package org.example.soa_lab2_LabService.generated.jooq.s311690.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.example.soa_lab2_LabService.generated.jooq.s311690.Keys;
import org.example.soa_lab2_LabService.generated.jooq.s311690.Public;
import org.example.soa_lab2_LabService.generated.jooq.s311690.tables.records.ReviewRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Review extends TableImpl<ReviewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.review</code>
     */
    public static final Review REVIEW = new Review();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReviewRecord> getRecordType() {
        return ReviewRecord.class;
    }

    /**
     * The column <code>public.review.id</code>.
     */
    public final TableField<ReviewRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.review.message</code>.
     */
    public final TableField<ReviewRecord, String> MESSAGE = createField(DSL.name("message"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.review.serial_number</code>.
     */
    public final TableField<ReviewRecord, Integer> SERIAL_NUMBER = createField(DSL.name("serial_number"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.review.buyer_id</code>.
     */
    public final TableField<ReviewRecord, Integer> BUYER_ID = createField(DSL.name("buyer_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private Review(Name alias, Table<ReviewRecord> aliased) {
        this(alias, aliased, null);
    }

    private Review(Name alias, Table<ReviewRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.review</code> table reference
     */
    public Review(String alias) {
        this(DSL.name(alias), REVIEW);
    }

    /**
     * Create an aliased <code>public.review</code> table reference
     */
    public Review(Name alias) {
        this(alias, REVIEW);
    }

    /**
     * Create a <code>public.review</code> table reference
     */
    public Review() {
        this(DSL.name("review"), null);
    }

    public <O extends Record> Review(Table<O> child, ForeignKey<O, ReviewRecord> key) {
        super(child, key, REVIEW);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ReviewRecord, Integer> getIdentity() {
        return (Identity<ReviewRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ReviewRecord> getPrimaryKey() {
        return Keys.REVIEW_PKEY;
    }

    @Override
    public List<ForeignKey<ReviewRecord, ?>> getReferences() {
        return Arrays.asList(Keys.REVIEW__REVIEW_SERIAL_NUMBER_FKEY, Keys.REVIEW__REVIEW_BUYER_ID_FKEY);
    }

    private transient SerialNumber _serialNumber;
    private transient Buyer _buyer;

    /**
     * Get the implicit join path to the <code>public.serial_number</code>
     * table.
     */
    public SerialNumber serialNumber() {
        if (_serialNumber == null)
            _serialNumber = new SerialNumber(this, Keys.REVIEW__REVIEW_SERIAL_NUMBER_FKEY);

        return _serialNumber;
    }

    /**
     * Get the implicit join path to the <code>public.buyer</code> table.
     */
    public Buyer buyer() {
        if (_buyer == null)
            _buyer = new Buyer(this, Keys.REVIEW__REVIEW_BUYER_ID_FKEY);

        return _buyer;
    }

    @Override
    public Review as(String alias) {
        return new Review(DSL.name(alias), this);
    }

    @Override
    public Review as(Name alias) {
        return new Review(alias, this);
    }

    @Override
    public Review as(Table<?> alias) {
        return new Review(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Review rename(String name) {
        return new Review(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Review rename(Name name) {
        return new Review(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Review rename(Table<?> name) {
        return new Review(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
