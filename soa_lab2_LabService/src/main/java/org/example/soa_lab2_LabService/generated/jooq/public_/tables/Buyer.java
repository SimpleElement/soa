/*
 * This file is generated by jOOQ.
 */
package org.example.soa_lab2_LabService.generated.jooq.public_.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.example.soa_lab2_LabService.generated.jooq.public_.Keys;
import org.example.soa_lab2_LabService.generated.jooq.public_.Public;
import org.example.soa_lab2_LabService.generated.jooq.public_.tables.records.BuyerRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Buyer extends TableImpl<BuyerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.buyer</code>
     */
    public static final Buyer BUYER = new Buyer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BuyerRecord> getRecordType() {
        return BuyerRecord.class;
    }

    /**
     * The column <code>public.buyer.id</code>.
     */
    public final TableField<BuyerRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.buyer.account_id</code>.
     */
    public final TableField<BuyerRecord, Integer> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private Buyer(Name alias, Table<BuyerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Buyer(Name alias, Table<BuyerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.buyer</code> table reference
     */
    public Buyer(String alias) {
        this(DSL.name(alias), BUYER);
    }

    /**
     * Create an aliased <code>public.buyer</code> table reference
     */
    public Buyer(Name alias) {
        this(alias, BUYER);
    }

    /**
     * Create a <code>public.buyer</code> table reference
     */
    public Buyer() {
        this(DSL.name("buyer"), null);
    }

    public <O extends Record> Buyer(Table<O> child, ForeignKey<O, BuyerRecord> key) {
        super(child, key, BUYER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<BuyerRecord, Integer> getIdentity() {
        return (Identity<BuyerRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<BuyerRecord> getPrimaryKey() {
        return Keys.BUYER_PKEY;
    }

    @Override
    public List<ForeignKey<BuyerRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BUYER__BUYER_ACCOUNT_ID_FKEY);
    }

    private transient Account _account;

    /**
     * Get the implicit join path to the <code>public.account</code> table.
     */
    public Account account() {
        if (_account == null)
            _account = new Account(this, Keys.BUYER__BUYER_ACCOUNT_ID_FKEY);

        return _account;
    }

    @Override
    public Buyer as(String alias) {
        return new Buyer(DSL.name(alias), this);
    }

    @Override
    public Buyer as(Name alias) {
        return new Buyer(alias, this);
    }

    @Override
    public Buyer as(Table<?> alias) {
        return new Buyer(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Buyer rename(String name) {
        return new Buyer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Buyer rename(Name name) {
        return new Buyer(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Buyer rename(Table<?> name) {
        return new Buyer(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
