/*
 * This file is generated by jOOQ.
 */
package org.example.soa_lab2_LabService.generated.jooq.public_.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.example.soa_lab2_LabService.generated.jooq.public_.Keys;
import org.example.soa_lab2_LabService.generated.jooq.public_.Public;
import org.example.soa_lab2_LabService.generated.jooq.public_.tables.records.CarRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Car extends TableImpl<CarRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.car</code>
     */
    public static final Car CAR = new Car();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CarRecord> getRecordType() {
        return CarRecord.class;
    }

    /**
     * The column <code>public.car.id</code>.
     */
    public final TableField<CarRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.car.car_brand_id</code>.
     */
    public final TableField<CarRecord, Integer> CAR_BRAND_ID = createField(DSL.name("car_brand_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.car.model</code>.
     */
    public final TableField<CarRecord, String> MODEL = createField(DSL.name("model"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private Car(Name alias, Table<CarRecord> aliased) {
        this(alias, aliased, null);
    }

    private Car(Name alias, Table<CarRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.car</code> table reference
     */
    public Car(String alias) {
        this(DSL.name(alias), CAR);
    }

    /**
     * Create an aliased <code>public.car</code> table reference
     */
    public Car(Name alias) {
        this(alias, CAR);
    }

    /**
     * Create a <code>public.car</code> table reference
     */
    public Car() {
        this(DSL.name("car"), null);
    }

    public <O extends Record> Car(Table<O> child, ForeignKey<O, CarRecord> key) {
        super(child, key, CAR);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<CarRecord, Integer> getIdentity() {
        return (Identity<CarRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CarRecord> getPrimaryKey() {
        return Keys.CAR_PKEY;
    }

    @Override
    public List<UniqueKey<CarRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CAR_MODEL_KEY);
    }

    @Override
    public List<ForeignKey<CarRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CAR__CAR_CAR_BRAND_ID_FKEY);
    }

    private transient CarBrand _carBrand;

    /**
     * Get the implicit join path to the <code>public.car_brand</code> table.
     */
    public CarBrand carBrand() {
        if (_carBrand == null)
            _carBrand = new CarBrand(this, Keys.CAR__CAR_CAR_BRAND_ID_FKEY);

        return _carBrand;
    }

    @Override
    public Car as(String alias) {
        return new Car(DSL.name(alias), this);
    }

    @Override
    public Car as(Name alias) {
        return new Car(alias, this);
    }

    @Override
    public Car as(Table<?> alias) {
        return new Car(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Car rename(String name) {
        return new Car(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Car rename(Name name) {
        return new Car(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Car rename(Table<?> name) {
        return new Car(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
