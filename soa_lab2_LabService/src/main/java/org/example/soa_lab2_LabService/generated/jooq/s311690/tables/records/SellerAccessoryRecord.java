/*
 * This file is generated by jOOQ.
 */
package org.example.soa_lab2_LabService.generated.jooq.s311690.tables.records;


import org.example.soa_lab2_LabService.generated.jooq.s311690.tables.SellerAccessory;
import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SellerAccessoryRecord extends UpdatableRecordImpl<SellerAccessoryRecord> implements Record3<Integer, Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.seller_accessory.seller_id</code>.
     */
    public void setSellerId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.seller_accessory.seller_id</code>.
     */
    public Integer getSellerId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.seller_accessory.accessory_id</code>.
     */
    public void setAccessoryId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.seller_accessory.accessory_id</code>.
     */
    public Integer getAccessoryId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.seller_accessory.count</code>.
     */
    public void setCount(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.seller_accessory.count</code>.
     */
    public Integer getCount() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Integer, Integer> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, Integer, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return SellerAccessory.SELLER_ACCESSORY.SELLER_ID;
    }

    @Override
    public Field<Integer> field2() {
        return SellerAccessory.SELLER_ACCESSORY.ACCESSORY_ID;
    }

    @Override
    public Field<Integer> field3() {
        return SellerAccessory.SELLER_ACCESSORY.COUNT;
    }

    @Override
    public Integer component1() {
        return getSellerId();
    }

    @Override
    public Integer component2() {
        return getAccessoryId();
    }

    @Override
    public Integer component3() {
        return getCount();
    }

    @Override
    public Integer value1() {
        return getSellerId();
    }

    @Override
    public Integer value2() {
        return getAccessoryId();
    }

    @Override
    public Integer value3() {
        return getCount();
    }

    @Override
    public SellerAccessoryRecord value1(Integer value) {
        setSellerId(value);
        return this;
    }

    @Override
    public SellerAccessoryRecord value2(Integer value) {
        setAccessoryId(value);
        return this;
    }

    @Override
    public SellerAccessoryRecord value3(Integer value) {
        setCount(value);
        return this;
    }

    @Override
    public SellerAccessoryRecord values(Integer value1, Integer value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SellerAccessoryRecord
     */
    public SellerAccessoryRecord() {
        super(SellerAccessory.SELLER_ACCESSORY);
    }

    /**
     * Create a detached, initialised SellerAccessoryRecord
     */
    public SellerAccessoryRecord(Integer sellerId, Integer accessoryId, Integer count) {
        super(SellerAccessory.SELLER_ACCESSORY);

        setSellerId(sellerId);
        setAccessoryId(accessoryId);
        setCount(count);
        resetChangedOnNotNull();
    }
}
