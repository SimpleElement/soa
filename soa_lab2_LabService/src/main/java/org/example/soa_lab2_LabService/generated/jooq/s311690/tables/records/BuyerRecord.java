/*
 * This file is generated by jOOQ.
 */
package org.example.soa_lab2_LabService.generated.jooq.s311690.tables.records;


import org.example.soa_lab2_LabService.generated.jooq.s311690.tables.Buyer;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BuyerRecord extends UpdatableRecordImpl<BuyerRecord> implements Record2<Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.buyer.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.buyer.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.buyer.account_id</code>.
     */
    public void setAccountId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.buyer.account_id</code>.
     */
    public Integer getAccountId() {
        return (Integer) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Integer, Integer> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Buyer.BUYER.ID;
    }

    @Override
    public Field<Integer> field2() {
        return Buyer.BUYER.ACCOUNT_ID;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getAccountId();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getAccountId();
    }

    @Override
    public BuyerRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public BuyerRecord value2(Integer value) {
        setAccountId(value);
        return this;
    }

    @Override
    public BuyerRecord values(Integer value1, Integer value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BuyerRecord
     */
    public BuyerRecord() {
        super(Buyer.BUYER);
    }

    /**
     * Create a detached, initialised BuyerRecord
     */
    public BuyerRecord(Integer id, Integer accountId) {
        super(Buyer.BUYER);

        setId(id);
        setAccountId(accountId);
        resetChangedOnNotNull();
    }
}
