/*
 * This file is generated by jOOQ.
 */
package org.example.soa_lab2_LabService.generated.jooq.s311690.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.example.soa_lab2_LabService.generated.jooq.s311690.Keys;
import org.example.soa_lab2_LabService.generated.jooq.s311690.Public;
import org.example.soa_lab2_LabService.generated.jooq.s311690.tables.records.CarToCarPartRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CarToCarPart extends TableImpl<CarToCarPartRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.car_to_car_part</code>
     */
    public static final CarToCarPart CAR_TO_CAR_PART = new CarToCarPart();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CarToCarPartRecord> getRecordType() {
        return CarToCarPartRecord.class;
    }

    /**
     * The column <code>public.car_to_car_part.car_id</code>.
     */
    public final TableField<CarToCarPartRecord, Integer> CAR_ID = createField(DSL.name("car_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.car_to_car_part.car_part_id</code>.
     */
    public final TableField<CarToCarPartRecord, Integer> CAR_PART_ID = createField(DSL.name("car_part_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private CarToCarPart(Name alias, Table<CarToCarPartRecord> aliased) {
        this(alias, aliased, null);
    }

    private CarToCarPart(Name alias, Table<CarToCarPartRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.car_to_car_part</code> table reference
     */
    public CarToCarPart(String alias) {
        this(DSL.name(alias), CAR_TO_CAR_PART);
    }

    /**
     * Create an aliased <code>public.car_to_car_part</code> table reference
     */
    public CarToCarPart(Name alias) {
        this(alias, CAR_TO_CAR_PART);
    }

    /**
     * Create a <code>public.car_to_car_part</code> table reference
     */
    public CarToCarPart() {
        this(DSL.name("car_to_car_part"), null);
    }

    public <O extends Record> CarToCarPart(Table<O> child, ForeignKey<O, CarToCarPartRecord> key) {
        super(child, key, CAR_TO_CAR_PART);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<CarToCarPartRecord> getPrimaryKey() {
        return Keys.CAR_TO_CAR_PART_PKEY;
    }

    @Override
    public List<ForeignKey<CarToCarPartRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CAR_TO_CAR_PART__CAR_TO_CAR_PART_CAR_ID_FKEY, Keys.CAR_TO_CAR_PART__CAR_TO_CAR_PART_CAR_PART_ID_FKEY);
    }

    private transient Car _car;
    private transient CarPart _carPart;

    /**
     * Get the implicit join path to the <code>public.car</code> table.
     */
    public Car car() {
        if (_car == null)
            _car = new Car(this, Keys.CAR_TO_CAR_PART__CAR_TO_CAR_PART_CAR_ID_FKEY);

        return _car;
    }

    /**
     * Get the implicit join path to the <code>public.car_part</code> table.
     */
    public CarPart carPart() {
        if (_carPart == null)
            _carPart = new CarPart(this, Keys.CAR_TO_CAR_PART__CAR_TO_CAR_PART_CAR_PART_ID_FKEY);

        return _carPart;
    }

    @Override
    public CarToCarPart as(String alias) {
        return new CarToCarPart(DSL.name(alias), this);
    }

    @Override
    public CarToCarPart as(Name alias) {
        return new CarToCarPart(alias, this);
    }

    @Override
    public CarToCarPart as(Table<?> alias) {
        return new CarToCarPart(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CarToCarPart rename(String name) {
        return new CarToCarPart(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CarToCarPart rename(Name name) {
        return new CarToCarPart(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CarToCarPart rename(Table<?> name) {
        return new CarToCarPart(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
