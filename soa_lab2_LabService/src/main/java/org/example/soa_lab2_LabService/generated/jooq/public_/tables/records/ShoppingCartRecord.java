/*
 * This file is generated by jOOQ.
 */
package org.example.soa_lab2_LabService.generated.jooq.public_.tables.records;


import org.example.soa_lab2_LabService.generated.jooq.public_.tables.ShoppingCart;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ShoppingCartRecord extends UpdatableRecordImpl<ShoppingCartRecord> implements Record4<Integer, Double, Integer, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.shopping_cart.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.shopping_cart.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.shopping_cart.amount</code>.
     */
    public void setAmount(Double value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.shopping_cart.amount</code>.
     */
    public Double getAmount() {
        return (Double) get(1);
    }

    /**
     * Setter for <code>public.shopping_cart.buyer_id</code>.
     */
    public void setBuyerId(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.shopping_cart.buyer_id</code>.
     */
    public Integer getBuyerId() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>public.shopping_cart.is_active</code>.
     */
    public void setIsActive(Boolean value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.shopping_cart.is_active</code>.
     */
    public Boolean getIsActive() {
        return (Boolean) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Double, Integer, Boolean> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, Double, Integer, Boolean> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return ShoppingCart.SHOPPING_CART.ID;
    }

    @Override
    public Field<Double> field2() {
        return ShoppingCart.SHOPPING_CART.AMOUNT;
    }

    @Override
    public Field<Integer> field3() {
        return ShoppingCart.SHOPPING_CART.BUYER_ID;
    }

    @Override
    public Field<Boolean> field4() {
        return ShoppingCart.SHOPPING_CART.IS_ACTIVE;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Double component2() {
        return getAmount();
    }

    @Override
    public Integer component3() {
        return getBuyerId();
    }

    @Override
    public Boolean component4() {
        return getIsActive();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Double value2() {
        return getAmount();
    }

    @Override
    public Integer value3() {
        return getBuyerId();
    }

    @Override
    public Boolean value4() {
        return getIsActive();
    }

    @Override
    public ShoppingCartRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public ShoppingCartRecord value2(Double value) {
        setAmount(value);
        return this;
    }

    @Override
    public ShoppingCartRecord value3(Integer value) {
        setBuyerId(value);
        return this;
    }

    @Override
    public ShoppingCartRecord value4(Boolean value) {
        setIsActive(value);
        return this;
    }

    @Override
    public ShoppingCartRecord values(Integer value1, Double value2, Integer value3, Boolean value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ShoppingCartRecord
     */
    public ShoppingCartRecord() {
        super(ShoppingCart.SHOPPING_CART);
    }

    /**
     * Create a detached, initialised ShoppingCartRecord
     */
    public ShoppingCartRecord(Integer id, Double amount, Integer buyerId, Boolean isActive) {
        super(ShoppingCart.SHOPPING_CART);

        setId(id);
        setAmount(amount);
        setBuyerId(buyerId);
        setIsActive(isActive);
        resetChangedOnNotNull();
    }
}
